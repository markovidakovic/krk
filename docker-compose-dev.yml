services:
  api:
    image: krk-api:${API_TAG}
    build:
      context: ./api
      dockerfile: Dockerfile
      target: development
    init: true
    volumes:
      - ./api:/usr/src/app
      - ./files:/usr/src/app/files
    networks:
      - krk-network
    ports:
      - "3000:3000"
    depends_on:
      database:
        condition: service_healthy
  proc:
    image: krk-proc:${PROC_TAG}
    build:
      context: ./proc
      dockerfile: Dockerfile
      target: development
    init: true
    volumes:
      - ./proc:/usr/src/app
      - ./files:/usr/src/app/files
    networks:
      - krk-network
  database:
    image: postgres:${PG_VERSION}
    environment:
      - POSTGRES_DB=${PG_DATABASE}
      - POSTGRES_USER=${PG_USERNAME}
      - POSTGRES_PASSWORD=${PG_PASSWORD}
    volumes:
      - data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - krk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $PG_USERNAME -d $PG_DATABASE"]
      interval: 3s
      timeout: 5s
      retries: 5

networks:
  krk-network:
    driver: bridge

volumes:
  data: